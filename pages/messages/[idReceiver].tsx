import axios from 'axios';
import React, { useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { useDispatch, useSelector } from 'react-redux';
import {
	getMessages,
	getUsers,
} from '../../services/features/messages/messageSlice';
import { AppDispatch } from '../../services/store';
import RoomAside from '../../components/RoomAside';
import AsideUsers from '../../components/AsideUsers';
import Link from 'next/link';

const Messages = (props: any) => {
	const router = useRouter();
	const dispatch = useDispatch<AppDispatch>();
	const { messages, users, isError, isSuccess, isLoading, messageError } =
		useSelector((state: any) => state.messages);

	// useEffect(() => {
	// 	// dispatch(getUsers());
	// }, []);

	// useEffect(() => {
	// 	const userIDS = { receiver: props.user._id, token: props.user.token };
	// 	console.log(props.user);
	// 	dispatch(getMessages(userIDS));
	// }, []);

	return (
		<>
			<Head>
				<title>Crypto chat</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className='fixed top-0 bottom-0 left-0 right-0 bg-blue-900 flex flex-column '>
				<RoomAside />
				<AsideUsers users={users} />
				{/* Main messages */}
				<div className='flex flex-col w-full h-full p-0'>
					<div className='h-full top-2   bg-gray-900 rounded-xl p-0 ml-2 my-4 mr-4 flex flex-col'>
						{/* <div className='w-full bg-slate-600 rounded-t-xl p-2 flex items-center gap-4 text-white'>
							<div className='rounded-full w-14 h-14 bg-slate-100'></div>
							<div>
								<h2 className='text-2xl'>
									{props.user && props.user.name}{' '}
									{props.user && props.user.lastname}
								</h2>
								<h6 className='text-xs text-blue-500'>
									@{props.user && props.user.username}
								</h6>
							</div>
						</div>
						<div className='p-4 text-white h-full'>
							{messages && messages.length > 0 ? <div>f</div> : <p></p>}
							{isError ? (
								<div className='w-full h-full flex items-center justify-center'>
									<p>Une erreur est survenu lors du chargement des messages</p>
								</div>
							) : (
								<></>
							)}
						</div> */}
					</div>
				</div>
			</main>
		</>
	);
};

export const getStaticProps = async (context: any) => {
	const API_BACKEND = process.env.NEXT_PUBLIC_BACKEND_URI!;
	const res = await axios.get(
		`${API_BACKEND}/api/v1/users/${context.params.idReceiver}`
	);
	const user = res.status === 200 ? res.data.user : null;

	return {
		props: {
			user: user,
		},
	};
};

export const getStaticPaths = async () => {
	const API_BACKEND = process.env.NEXT_PUBLIC_BACKEND_URI!;
	const res = await axios.get(`${API_BACKEND}/api/v1/users`);
	const users = res.data;
	const ids = users.users.map((user: any) => ({
		params: { idReceiver: user._id.toString() },
	}));
	return {
		paths: [...ids],
		fallback: false,
	};
};

export default Messages;

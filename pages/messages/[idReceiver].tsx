import axios from 'axios';
import React, { useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { useDispatch, useSelector } from 'react-redux';
import { getMessages } from '../../services/features/messages/messageSlice';
import { getUsers } from '../../services/features/users/usersSlice';
import { AppDispatch } from '../../services/store';
import RoomAside from '../../components/RoomAside';
import AsideUsers from '../../components/AsideUsers';
import Link from 'next/link';
import { toast } from 'react-toastify';
import { MdSend } from 'react-icons/md';

const Messages = (props: any) => {
	const router = useRouter();
	const dispatch = useDispatch<AppDispatch>();
	const { messages, isError, isSuccess, isLoading, messageError } = useSelector(
		(state: any) => state.messages
	);
	const { user } = useSelector((state: any) => state.auth);
	const {
		users,
		isError: isErrorUsers,
		isSuccess: isSuccessUsers,
		isLoading: isLoadingUsers,
		messageError: messageErrorUsers,
	} = useSelector((state: any) => state.users);

	useEffect(() => {
		dispatch(getUsers());
	}, [messages]);

	useEffect(() => {
		const userIDS = { receiver: props.user._id, token: props.user.token };
		dispatch(getUsers());
		dispatch(getMessages(userIDS));
	}, [props.user]);

	// useEffect(() => {
	// 	dispatch(getMessages());
	// }, []);

	return (
		<>
			<Head>
				<title>Crypto chat</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className='fixed top-0 bottom-0 left-0 right-0 bg-blue-900 flex flex-column '>
				<RoomAside />
				<AsideUsers users={users} />
				{/* Main messages */}
				<div className='flex flex-col w-full h-full p-0'>
					<div className='h-full top-2   bg-gray-900 rounded-xl p-0 my-4 mx-4 flex flex-col'>
						<div className='w-full bg-slate-600 rounded-t-xl p-2 flex items-center gap-4 text-white'>
							<div className='rounded-full w-14 h-14 bg-slate-100'></div>
							<div>
								<h2 className='text-2xl'>
									{props.user && props.user.name}{' '}
									{props.user && props.user.lastname}
								</h2>
								<h6 className='text-xs text-blue-500'>
									@{props.user && props.user.username}
								</h6>
							</div>
						</div>

						{/* display messages */}
						<div className='p-4 text-white h-full'>
							{messages && messages.messages.length > 0 ? (
								<div>
									{messages.messages.map((msg: any) => (
										<div
											className='flex flex-col h-full overflow-y-scroll'
											key={msg._id}
										>
											{msg.sender === user?._id.toString() ? (
												<div className='p-4 bg-blue-900 w-max rounded-lg m-2 self-start'>
													<div className='flex items-center justify-between mb-2'>
														<h6 className='text-xs text-slate-400'>
															<span>{props.user && props.user.name}</span>{' '}
															<span>{props.user && props.user.lastname}</span>
														</h6>
														<h6 className='text-xs  text-slate-400'>
															{new Date(msg.updatedAt).toLocaleTimeString()}
														</h6>
													</div>
													<p>{msg.content}</p>
												</div>
											) : (
												<div className='p-2 bg-slate-700 w-max rounded-lg m-2 self-end'>
													<div className='flex items-center justify-between'>
														<h6 className='text-xs mb-2 text-slate-400'>
															<span>{props.user && props.user.name}</span>{' '}
															<span>{props.user && props.user.lastname}</span>
														</h6>
														<h6 className='text-xs mt-2 text-slate-400'>
															{new Date(msg.updatedAt).toLocaleTimeString()}
														</h6>
													</div>
													<p>{msg.content}</p>
												</div>
											)}
										</div>
									))}
								</div>
							) : (
								<div className='h-full w-full flex flex-col items-center justify-center'>
									<p>Vous n'avez pas encore commenc√© une conversation avec </p>
									<h3 className='text-2xl text-blue-800'>
										<span>{props.user && props.user.name}</span>{' '}
										<span>{props.user && props.user.lastname}</span>
									</h3>
								</div>
							)}
							{isError ? (
								<div className='w-full h-full flex items-center justify-center'>
									<p>Une erreur est survenu lors du chargement des messages</p>
								</div>
							) : (
								<></>
							)}
						</div>

						{/* send message input */}
						<div className='bg-slate-600 text-slate-100 rounded-b-xl px-4 py-2 min-h-max h-max'>
							<form className='flex justify-between items-center min-h-max h-max'>
								<span>icon</span>
								<textarea
									name=''
									id=''
									className='w-full rounded-md bg-slate-400 mx-2 min-h-max h-max'
								></textarea>
								<button className='w-16 h-14 mx-2 bg-slate-900 text-slate-200 flex justify-center items-center text-2xl rounded-full animate-pulse hover:shadow-xl'>
									<MdSend />
								</button>
							</form>
						</div>
					</div>
				</div>
			</main>
		</>
	);
};

export const getStaticProps = async (context: any) => {
	const API_BACKEND = process.env.NEXT_PUBLIC_BACKEND_URI!;
	const res = await axios.get(
		`${API_BACKEND}/api/v1/users/${context.params.idReceiver}`
	);
	const user = res.status === 200 ? res.data.user : null;

	return {
		props: {
			user: user,
		},
	};
};

export const getStaticPaths = async () => {
	const API_BACKEND = process.env.NEXT_PUBLIC_BACKEND_URI!;
	const res = await axios.get(`${API_BACKEND}/api/v1/users`);
	const users = res.data;
	const ids = users.users.map((user: any) => ({
		params: { idReceiver: user._id.toString() },
	}));
	return {
		paths: [...ids],
		fallback: false,
	};
};

export default Messages;
